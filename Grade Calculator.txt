#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

// Calculates the average
float calculateAverage(float mathGrade, float scienceGrade, float englishGrade, float historyGrade, float artGrade) {
    return (mathGrade + scienceGrade + englishGrade + historyGrade + artGrade) / 5.0;
}

// Finds highest grade and subject
float findHighestGrade(float mathGrade, float scienceGrade, float englishGrade, float historyGrade, float artGrade, string &subjectName) {
    float highest = mathGrade;
    subjectName = "Math"; // Default assumption

    if (scienceGrade > highest) { 
        highest = scienceGrade; 
        subjectName = "Science"; 
    } else if (englishGrade > highest) { 
        highest = englishGrade; 
        subjectName = "English"; 
    } else if (historyGrade > highest) { 
        highest = historyGrade;
        subjectName = "History"; 
    } else if (artGrade > highest) { 
        highest = artGrade; 
        subjectName = "Art"; 
    } 
    
    return highest;
}

// Finds lowest grade and subject
float findLowestGrade(float mathGrade, float scienceGrade, float englishGrade, float historyGrade, float artGrade, string &subjectName) {
    float lowest = mathGrade;
    subjectName = "Math"; // Default assumption

    if (scienceGrade < lowest) { 
        lowest = scienceGrade; 
        subjectName = "Science"; 
    } else if (englishGrade < lowest) { 
        lowest = englishGrade; 
        subjectName = "English"; 
    } else if (historyGrade < lowest) { 
        lowest = historyGrade; 
        subjectName = "History"; 
    } else if (artGrade < lowest) { 
        lowest = artGrade; 
        subjectName = "Art"; 
    } 
        
    return lowest;
}

// Converts average grade into grade equivalent
float getGrade(float average) {

    if (average >= 96) {
        return 1.00;    // 96-100
    } else if (average >= 94) {
        return 1.25;    // 94-95
    } else if (average >= 92) { 
        return 1.50;    // 92-93
    } else if (average >= 90) {
        return 1.75;    // 90-91
    } else if (average >= 88) {
        return 2.00;    // 88-89
    } else if (average >= 86) {
        return 2.25;    // 86-87
    } else if (average >= 84) {
        return 2.50;    // 84-85
    } else if (average >= 82) {
        return 2.75;    // 82-83
    } else if (average >= 80) {
        return 3.00;    // 80-81
    } else {
        return 5.00;    // Below 80
    }
}

// Counts how many subjects are passing (≥60)
int countPassing(float mathGrade, float scienceGrade, float englishGrade, float historyGrade, float artGrade) {
    int count = 0;

    if (mathGrade >= 60) count++;
    if (scienceGrade >= 60) count++;
    if (englishGrade >= 60) count++;
    if (historyGrade >= 60) count++;
    if (artGrade >= 60) count++;

    return count;
}

// Calculates general weighted average
float getGWA(float average) {
    if (average >= 96) {
        return 1.0;    // Highest Grade
    } else if (average < 80) 
        return 5.0;    // Below Passing

    // Linear interpolation between 96 (1.00) and 80 (5.00)
    return 1.0 + (96.0 - average) * 0.25; // Formula 
}

// Checks if student qualifies for Director's list
void checkDirectorsList(float gwa) {
    cout << "Director's List Status: ";
    if (gwa <= 1.50) {
        cout << "YES (Congratulations!)" << endl;
    } else {
    cout << "NO" << endl;
    }
}

// Validate grade input (0–100)
float validateGradeInput(string subjectName) {
    float grade;
    do {
        cout << "Enter " << subjectName << " grade (0-100): ";
        cin >> grade;
        if (grade < 0 || grade > 100)
            cout << "Invalid grade. Please enter a value between 0 and 100." << endl << endl;
    } while (grade < 0 || grade > 100);
    return grade;
}


// Main Program
int main() {

    // Declare variables
    string studentName, studentID;
    int studentAge, birthYear, gradeLevel;

    cout << "========================================" << endl;
    cout << "       STUDENT GRADE CALCULATOR" << endl;
    cout << "========================================" << endl << endl;

    cout << "=== STUDENT PROFILE SETUP ===" << endl;
    cout << "Enter student name: ";
    getline(cin, studentName); // Getline allows spaces in user input
    cout << "Enter student ID: ";
    getline(cin, studentID); // Getline allows spaces in user input
    cout << "Enter student age: ";
    cin >> studentAge;
    cin.ignore(); // Clears leftover input, allows getline to work properly
    cout << "Enter grade level: ";
    cin >> gradeLevel;
    cout << endl << "Profile created successfully!" << endl;

    birthYear = 2025 - studentAge;

    cout << endl << "=== GRADE ENTRY ===" << endl;
    float mathGrade = validateGradeInput("Math");
    float scienceGrade = validateGradeInput("Science");
    float englishGrade = validateGradeInput("English");
    float historyGrade = validateGradeInput("History");
    float artGrade = validateGradeInput("Art");
    cout << endl << "Grades recorded successfully!" << endl;

    cout << endl << "========================================" << endl;
    cout << "        STUDENT REPORT CARD" << endl;
    cout << "========================================" << endl << endl;

    cout << "STUDENT INFORMATION:" << endl;
    cout << "Name: " << studentName << endl;
    cout << "ID: " << studentID << endl;
    cout << "Age: " << studentAge << " years old" << endl;
    
    // Add suffix when printing grade level
    cout << "Grade Level: ";
    if (gradeLevel == 1) {
        cout << "1st grade" << endl;
    } else if (gradeLevel == 2) {
        cout << "2nd grade" << endl;
    } else if (gradeLevel == 3) {
        cout << "3rd grade" << endl;
    } else 
        cout << gradeLevel << "th grade" << endl;
        
    cout << "Birth Year: " << birthYear << endl << endl;

    cout << "SUBJECT GRADES:" << endl;
    cout << fixed << setprecision(1);
    cout << "Math: " << mathGrade << "%" << endl;
    cout << "Science: " << scienceGrade << "%" << endl;
    cout << "English: " << englishGrade << "%" << endl;
    cout << "History: " << historyGrade << "%" << endl;
    cout << "Art: " << artGrade << "%" << endl << endl;

    cout << "GRADE STATISTICS:" << endl;
    float averageGrade = calculateAverage(mathGrade, scienceGrade, englishGrade, historyGrade, artGrade);

    string highestSubject, lowestSubject;
    float highest = findHighestGrade(mathGrade, scienceGrade, englishGrade, historyGrade, artGrade, highestSubject);
    float lowest = findLowestGrade(mathGrade, scienceGrade, englishGrade, historyGrade, artGrade, lowestSubject);

    float gradeEquivalent = getGrade(averageGrade); 
    float gwa = getGWA(averageGrade);             

    cout << fixed << setprecision(2);
    cout << "Average Grade: " << averageGrade << "%" << endl;
    cout << "Grade Equivalent: " << gradeEquivalent << endl;

    cout << fixed << setprecision(1);
    cout << "Highest Grade: " << highest << "% (" << highestSubject << ")" << endl;
    cout << "Lowest Grade: " << lowest << "% (" << lowestSubject << ")" << endl;
    cout << "Subjects Passing: " << countPassing(mathGrade, scienceGrade, englishGrade, historyGrade, artGrade) << " out of 5" << endl << endl;

    cout << fixed << setprecision(3);
    cout << "GWA: " << gwa << endl;
    checkDirectorsList(gwa);

    cout << endl << "========================================" << endl;
    return 0;

}

